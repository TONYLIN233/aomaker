{"uid":"b1d77c219ea66cd8","name":"test_get_auth_without_username","fullName":"testcases.test_scenario.auth.test_auth#test_get_auth_without_username","historyId":"f6488ca0c7fa7ed61168a98f9a56cfbc","time":{"start":1758157789416,"stop":1758157789443,"duration":27},"description":"测试不输入uersname获取access_token","descriptionHtml":"<p>测试不输入uersname获取access_token</p>\n","status":"failed","statusMessage":"AssertionError: 字段 'detail' 类型应为 'string 或 null'，实际值为: [{\"type\": \"missing\", \"loc\": [\"body\", \"username\"], ... (类型: list).","statusTrace":"@pytest.mark.auth\n    def test_get_auth_without_username():\n        \"\"\"测试不输入uersname获取access_token\"\"\"\n        request_body = LoginForAccessTokenApiLoginTokenPostAPI.RequestBodyModel(username=None,password='123456')\n    \n>       res = LoginForAccessTokenApiLoginTokenPostAPI(request_body = request_body).send()\n\ntestcases\\test_scenario\\auth\\test_auth.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:111: in send\n    return self._handle_response(cached_response, stream)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:120: in _handle_response\n    parsed = self._parse_response(cached_response)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:146: in _parse_response\n    self._validate_response_schema(response_data)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:162: in _validate_response_schema\n    self.schema_validate(response_data, existing_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = LoginForAccessTokenApiLoginTokenPostAPI(base_url='http://127.0.0.1:9999', headers={}, path_params=None, query_params=N...ass 'mockapitest.apis.mock2.auth.models.TokenResponseData'>, endpoint_id='login_for_access_token_api_login_token_post')\ninstance = {'detail': [{'input': {'password': '123456'}, 'loc': ['body', 'username'], 'msg': 'Field required', 'type': 'missing', ...}]}\nschema = {'$schema': 'http://json-schema.org/draft/2020-12/schema#', 'additionalProperties': False, 'properties': {'data': {'ad...t': 'success', 'type': ['string', 'null']}, 'ret_code': {'default': 0, 'type': ['integer', 'null']}}, 'type': 'object'}\n\n    def schema_validate(self, instance, schema):\n        \"\"\"简化的schema验证方法\"\"\"\n        try:\n            validate(instance=instance, schema=schema)\n        except ValidationError as e:\n            error = best_match(e.context) if e.context else e\n            message = format_validation_error(error)\n>           raise AssertionError(message) from None\nE           AssertionError: 字段 'detail' 类型应为 'string 或 null'，实际值为: [{\"type\": \"missing\", \"loc\": [\"body\", \"username\"], ... (类型: list).\n\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:171: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"测试不输入uersname获取access_token","status":"failed","statusMessage":"AssertionError: 字段 'detail' 类型应为 'string 或 null'，实际值为: [{\"type\": \"missing\", \"loc\": [\"body\", \"username\"], ... (类型: list).","statusTrace":"@pytest.mark.auth\n    def test_get_auth_without_username():\n        \"\"\"测试不输入uersname获取access_token\"\"\"\n        request_body = LoginForAccessTokenApiLoginTokenPostAPI.RequestBodyModel(username=None,password='123456')\n    \n>       res = LoginForAccessTokenApiLoginTokenPostAPI(request_body = request_body).send()\n\ntestcases\\test_scenario\\auth\\test_auth.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:111: in send\n    return self._handle_response(cached_response, stream)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:120: in _handle_response\n    parsed = self._parse_response(cached_response)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:146: in _parse_response\n    self._validate_response_schema(response_data)\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:162: in _validate_response_schema\n    self.schema_validate(response_data, existing_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = LoginForAccessTokenApiLoginTokenPostAPI(base_url='http://127.0.0.1:9999', headers={}, path_params=None, query_params=N...ass 'mockapitest.apis.mock2.auth.models.TokenResponseData'>, endpoint_id='login_for_access_token_api_login_token_post')\ninstance = {'detail': [{'input': {'password': '123456'}, 'loc': ['body', 'username'], 'msg': 'Field required', 'type': 'missing', ...}]}\nschema = {'$schema': 'http://json-schema.org/draft/2020-12/schema#', 'additionalProperties': False, 'properties': {'data': {'ad...t': 'success', 'type': ['string', 'null']}, 'ret_code': {'default': 0, 'type': ['integer', 'null']}}, 'type': 'object'}\n\n    def schema_validate(self, instance, schema):\n        \"\"\"简化的schema验证方法\"\"\"\n        try:\n            validate(instance=instance, schema=schema)\n        except ValidationError as e:\n            error = best_match(e.context) if e.context else e\n            message = format_validation_error(error)\n>           raise AssertionError(message) from None\nE           AssertionError: 字段 'detail' 类型应为 'string 或 null'，实际值为: [{\"type\": \"missing\", \"loc\": [\"body\", \"username\"], ... (类型: list).\n\nD:\\aomaker\\venv\\lib\\site-packages\\aomaker\\core\\api_object.py:171: AssertionError","steps":[],"attachments":[{"uid":"af8f51f525304a87","name":"LoginForAccessTokenApiLoginTokenPostAPI","source":"af8f51f525304a87.json","type":"application/json","size":560},{"uid":"6d2aad304d14b700","name":"log","source":"6d2aad304d14b700.txt","type":"text/plain","size":1642}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[],"labels":[{"name":"tag","value":"auth"},{"name":"parentSuite","value":"testcases.test_scenario.auth"},{"name":"suite","value":"test_auth"},{"name":"host","value":"admin"},{"name":"thread","value":"34480-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_scenario.auth.test_auth"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["auth"]},"source":"b1d77c219ea66cd8.json","parameterValues":[]}